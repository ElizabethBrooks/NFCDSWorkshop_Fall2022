#import data from the clipboard
clip_table <- read.table(pipe("pbpaste"), header=TRUE)
#import data from the clipboard
clip_table <- read.table(pipe("pbpaste"), header=TRUE)
#import data from the clipboard
clip_table <- read.table(pipe("pbpaste"))
#import data from the clipboard
clip_table <- read.table(pipe("pbpaste"))
install.packages("WWWusage")
pirates <- read.csv("/Users/bamflappy/Documents/rPlayground/PiratesPirate.csv")
pirates
colnames(pirates)
# load libraries
library(ggplot2)
# plot the Limbs vs ShipID
ggplot(pirates, aes(x = Limbs, y = ShipID)) +
geom_point()
# plot the Teeth vs ShipID
ggplot(pirates, aes(x = Teeth, y = ShipID)) +
geom_point()
# plot the Teeth vs ShipID
pirate_plot <- ggplot(pirates, aes(x = Teeth, y = ShipID)) +
geom_point()
# color the plot of Teeth vs ShipID by Origin
ggplot(pirates, aes(x = Teeth, y = ShipID, color = Origin)) +
geom_point()
# plot the PositionID vs ShipID
ggplot(pirates, aes(x = PositionID, y = ShipID)) +
geom_point()
# color the plot of PositionID vs ShipID by Origin
ggplot(pirates, aes(x = PositionID, y = ShipID, color = Origin)) +
geom_point()
# view the column names of the pirate data
colnames(pirates)
# view the first few lines of data
head(pirates)
# plot the Limbs vs ShipID
ggplot(pirates, aes(x = Limbs, y = ShipID)) +
geom_point()
# color the plot of Limbs vs ShipID by Origin
ggplot(pirates, aes(x = Limbs, y = ShipID, color = Origin)) +
geom_point()
# color the plot of Limbs vs ShipID by Origin
ggplot(pirates, aes(x = Limbs, y = ShipID, color = Origin)) +
geom_count()
# cretae a scatter plot the Origin vs Limbs
ggplot(data = pirates, aes(x = Origin, y = Limbs)) +
geom_point()
# change to a boxplot of Origin vs Limbs
ggplot(data = pirates, aes(x = Origin, y = Limbs)) +
geom_boxplot()
# cretae a scatter plot the Teeth vs Limbs
ggplot(data = pirates, aes(x = Teeth, y = Limbs)) +
geom_point()
source("~/.active-rstudio-document", echo=TRUE)
# cretae a scatter plot the Limbs vs Teeth
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_point()
# modify the scatter plot to include the count at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = Origin)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = ShipID)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = ShipID)) +
geom_point()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = ShipID)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = Origin)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count() +
facet_wrap(~ Origin)
# change to a boxplot to better describe the data at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_boxplot()
# modify the scatter plot to include the count at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count()
?grepl
grepl("0.5" pirates$Limbs)
grepl("0.5", pirates$Limbs)
pirates[with(pirates, grepl("0.5", pirates$Limbs)), ]
# modify the scatter plot to include the count at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count()
# check the pirates with half limbs
pirates[pirates$Limbs == "2.5", ]
# remove the row of data for the pirate with 2.5 Limbs
pirates <- pirates(-c(753), )
# remove the row of data for the pirate with 2.5 Limbs
pirates <- pirates[-c(753), ]
# re-plot to verify the change in the data
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count()
# change to a boxplot to better describe the data at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_boxplot()
# change to a boxplot to better describe the data at each point
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot()
# import the pirate data
pirates <- read.csv("/Users/bamflappy/Documents/rPlayground/PiratesPirate.csv")
# change to a boxplot to better describe the data at each point
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot()
# check the data for the outlier pirate with 2.5 Limbs
pirates[pirates$Limbs == "2.5", ]
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_boxplot() +
facet_wrap(~ Origin)
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot() +
facet_wrap(~ Origin)
?factor''
?factor
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot() +
facet_wrap(~ Origin)
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = Origin)) +
geom_count()
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, color = Origin)) +
geom_boxplot()
# use the facotr function to make the different numbers of Limbs into categories
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot()
# look up color options on the internet by searching "ggplot boxplot color"
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, color = Origin)) +
geom_boxplot()
# create a separate boxplot for each Origin of pirates
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="red", fill="orange", alpha=0.2) +
facet_wrap(~ Origin)
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = class)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = Origin)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, color = Origin)) +
geom_boxplot()
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = Origin)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# example 3 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = Origin)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
scale_fill_brewer(palette="BuPu")
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="green", alpha=0.2) +
facet_wrap(~ Origin)
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="purple", fill="green", alpha=0.2) +
facet_wrap(~ Origin)
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="purple", alpha=0.2) +
facet_wrap(~ Origin)
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="green", alpha=0.2) +
facet_wrap(~ Origin)
# view the first few lines of data
head(pirates)
# change the appearance of the individual plot titles
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="green", alpha=0.2) +
facet_wrap(ShipID ~ Origin)
ships <- read.csv("/Users/bamflappy/Repos/rPlayground/data/PiratesShip.csv")
summary(ships)
mean(ships$CrewCapacity)
sum(ships$CrewCapacity)
swetwd
setwd
?setwd
#Load the edgeR library
library("edgeR")
?heatmap
# install packages, if necessary
if (!require("BiocManager", quietly = TRUE))
#Connect to a an ensembl website mart by specifying a BioMart and dataset parameters
#Mus_musculus.GRCm39
#ensembl = useEnsembl(biomart="ensembl", dataset="mmusculus_gene_ensembl")
#Homo_sapiens.GRCh38
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
library(biomaRt)
#Connect to a an ensembl website mart by specifying a BioMart and dataset parameters
#Mus_musculus.GRCm39
#ensembl = useEnsembl(biomart="ensembl", dataset="mmusculus_gene_ensembl")
#Homo_sapiens.GRCh38
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
#View available attributes
listAttributes(ensembl)
#View available attributes
View(listAttributes(ensembl))
#!/usr/bin/env Rscript
#R script to perform statistical analysis of gene count tables using edgeR exact test
#Usage: Rscript edgeR_projects.r mergedCountsFile
#Usage Ex: Rscript edgeR_projects.r 220705_Yoon_Adipocyte_Pool2_RNAseq_merged_counts_formatted.txt
#Usage Ex: Rscript edgeR_projects.r 220707_Yoon_Jurkat_Pool1_RNAseq_merged_counts_formatted.txt
#Install edgeR, this should only need to be done once
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#Install packages, this should only need to be done once
#BiocManager::install("edgeR")
#BiocManager::install("biomaRt")
#install.packages("msigdbr")
#install.packages("ggplot2")
#install.packages("tibble")
#install.packages("dplyr")
#install.packages("pheatmap")
#install.packages("ggplotify")
#Load libraries
library(edgeR)
library(biomaRt)
library(msigdbr)
library(ggplot2)
library(tibble)
library(dplyr)
library(pheatmap)
library(ggplotify)
#Connect to a an ensembl website mart by specifying a BioMart and dataset parameters
#Homo_sapiens.GRCh38
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
# load libraries
library("MODA")
browseVignettes(package="MODA")
browseVignettes("MODA")
install.packages("multcomp")
?TukeyHSD
?interaction.plot
library("biomaRt")
listMarts()
ensembl=useMart("ensembl")
listDatasets(ensembl)
View(listDatasets(ensembl))
View(listDatasets(ensembl))
# specify the hsapiens mart
ensembl = useMart("ensembl",dataset="hsapiens_gene_ensembl")
# retrieve the Ensembl IDs
ensIDs=c("LOC124194901")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c('dp_ensembl', 'entrezgene'),
filters = 'dp_ensembl',
values = ensIDs,
mart = ensembl)
# retrieve the Ensembl IDs
ensIDs=c("202763_at","209310_s_at","207500_at")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c('dp_ensembl', 'entrezgene'),
filters = 'dp_ensembl',
values = ensIDs,
mart = ensembl)
# setup filters
filters = listFilters(ensembl)
# setup attributes
attributes = listAttributes(ensembl)
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c('dp_ensembl', 'entrezgene'),
filters = 'dp_ensembl',
values = ensIDs,
mart = ensembl)
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c('affy_hg_u133_plus_2', 'entrezgene'),
filters = 'affy_hg_u133_plus_2',
values = ensIDs,
mart = ensembl)
# retrieve the Ensembl IDs
ensIDs=c("202763_at","209310_s_at","207500_at")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c('affy_hg_u133_plus_2', 'entrezgene'),
filters = 'affy_hg_u133_plus_2',
values = ensIDs,
mart = ensembl)
# load libraries
library("biomaRt")
# specify the hsapiens mart
ensembl = useMart("ensembl",dataset="hsapiens_gene_ensembl")
# setup filters
filters = listFilters(ensembl)
# setup attributes
attributes = listAttributes(ensembl)
# retrieve the Ensembl IDs
ensIDs=c("202763_at","209310_s_at","207500_at")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c('affy_hg_u133_plus_2', 'entrezgene'),
filters = 'affy_hg_u133_plus_2',
values = ensIDs,
mart = ensembl)
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("affy_hg_u133_plus_2", "entrezgene"),
filters = "affy_hg_u133_plus_2",
values = ensIDs,
mart = ensembl)
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("affy_hg_u133_plus_2", "entrezgene_id"),
filters = "affy_hg_u133_plus_2",
values = ensIDs,
mart = ensembl)
# retrieve the Ensembl IDs
ensIDs=c("LOC124194901")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("affy_hg_u133_plus_2", "entrezgene_id"),
filters = "affy_hg_u133_plus_2",
values = ensIDs,
mart = ensembl)
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("dp_ensembl", "entrezgene_id"),
filters = "dp_ensembl",
values = ensIDs,
mart = ensembl)
# retrieve the Ensembl IDs
ensIDs=c("202763_at","209310_s_at","207500_at")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("dp_ensembl", "entrezgene_id"),
filters = "dp_ensembl",
values = ensIDs,
mart = ensembl)
View(attributes)
# retrieve the Ensembl IDs
ensIDs=c("XM_046589659.1")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("ensembl_transcript_id", "entrezgene_id"),
filters = "ensembl_transcript_id",
values = ensIDs,
mart = ensembl)
# load libraries
library("biomaRt")
# specify the hsapiens mart
ensembl = useMart("ensembl",dataset="hsapiens_gene_ensembl")
# check out filters
filters = listFilters(ensembl)
View(filters)
# check out attributes
attributes = listAttributes(ensembl)
View(attributes)
# retrieve the Ensembl IDs
ensIDs=c("XM_046601202.1", "XR_006879527.1", "XR_006878626.1", "XR_006878982.1", "XM_046601405.1", "XM_046601407.1", "XM_046601408.1", "XM_046601117.1", "XR_006878744.1", "XR_006878741.1")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("ensembl_transcript_id", "entrezgene_id"),
filters = "ensembl_transcript_id",
values = ensIDs,
mart = ensembl)
# retrieve the Ensembl IDs
ensIDs=c("XM_046580782.1")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("ensembl_transcript_id", "entrezgene_id"),
filters = "ensembl_transcript_id",
values = ensIDs,
mart = ensembl)
# load libraries
library("biomaRt")
# specify the hsapiens mart
ensembl = useMart("ensembl",dataset="hsapiens_gene_ensembl")
# check out filters
filters = listFilters(ensembl)
View(filters)
# check out attributes
attributes = listAttributes(ensembl)
View(attributes)
# retrieve the Ensembl IDs
ensIDs=c("XM_046580782.1")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("ensembl_transcript_id", "entrezgene_id"),
filters = "ensembl_transcript_id",
values = ensIDs,
mart = ensembl)
#Import normalized gene count data
#inputTable <- read.csv(file=args[1], row.names="gene")[ ,args[2]:args[3]]
inputTable <- read.csv(file="/Users/bamflappy/PfrenderLab/OLYM_dMelUV/KAP4/DEGenotypes/glmQLF_normalizedCounts.csv", row.names="gene", header=TRUE)[ ,1:24]
head(inputTable)
# retrieve the Ensembl IDs
ensIDs=c("ATP6")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("ensembl_gene_id", "entrezgene_id"),
filters = "ensembl_gene_id",
values = ensIDs,
mart = ensembl)
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("external_gene_name", "entrezgene_id"),
filters = "external_gene_name",
values = ensIDs,
mart = ensembl)
# retrieve the Ensembl IDs
ensIDs=c("gene-ATP6")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("external_gene_name", "entrezgene_id"),
filters = "external_gene_name",
values = ensIDs,
mart = ensembl)
# retrieve the Ensembl IDs
ensIDs=c("ATP6")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("hgnc_id", "entrezgene_id"),
filters = "hgnc_id",
values = ensIDs,
mart = ensembl)
# retrieve the Ensembl IDs
ensIDs=c("gene-ATP6")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("hgnc_id", "entrezgene_id"),
filters = "hgnc_id",
values = ensIDs,
mart = ensembl)
# retrieve the Ensembl IDs
ensIDs=c("MT-ATP6")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("hgnc_id", "entrezgene_id"),
filters = "hgnc_id",
values = ensIDs,
mart = ensembl)
# retrieve the Ensembl IDs
ensIDs=c("4508")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("hgnc_id", "entrezgene_id"),
filters = "hgnc_id",
values = ensIDs,
mart = ensembl)
# retrieve the Ensembl IDs
ensIDs=c("P00846")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("uniprot_gn_symbol", "entrezgene_id"),
filters = "uniprot_gn_symbol",
values = ensIDs,
mart = ensembl)
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("uniprot_gn_id", "entrezgene_id"),
filters = "uniprot_gn_id",
values = ensIDs,
mart = ensembl)
# retrieve the Ensembl IDs
ensIDs=c("E9HGM4")
# map the Ensembl to the EntrezGene IDs
getBM(attributes=c("uniprot_gn_id", "entrezgene_id"),
filters = "uniprot_gn_id",
values = ensIDs,
mart = ensembl)
listMarts()
head(inputTable)
View(inputTable)
inputTable$gene-ATP6
rownames(inputTable)$gene-ATP6
inputTable['gene-ATP6',]
inputTable['gene-LOC124194901',]
View(inputTable)
tail(inputTable)
??gbRecord
install.packages("biofiles")
install.packages("gschofl")
install.packages("gbRecord")
View(inputTable)
install.packages("ggplot2")
install.packages("ghibli")
install.packages("ggVennDiagram")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
BiocManager::install("edgeR")
#!/usr/bin/env Rscript
##
# Working Directory
##
# set the working directory
#setwd("/YOUR/PATH/")
setwd("/Users/bamflappy/Repos/NFCDSWorkshop_Fall2022/")
##
# Packages
##
# install packages, if necessary
#install.packages("ggplot2")
#install.packages("ghibli")
#install.packages("ggVennDiagram")
#if (!require("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("edgeR")
# import libraries
library(ggplot2)
